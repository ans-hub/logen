#!/bin/bash
#
# Logs generator (LoGen) - perfom generating fake logs for qa test DaSp
#
# Style guide: https://google.github.io/styleguide/shell.xml

function fx_usage() {

  echo "Usage: logen [options]... [date_start] [date_end]
  
  Main flags:
    -s (--step-sec)         - step in seconds to iterate dates
    -d (--date-format)      - output date format in \$(date) format
    -g (--garbage-fields)   - garbage fields count, date field, field
                              length and delimeter in "%d,%d,%d,%s" format
    -o (--output)           - output filename path & prefix (optional)
    -b (--output-debug)     - show debug info (optional)
    -h (--help)             - output this info
  
  Date flags:
    - set in any format recognized by \$(date) command
    - time of day is not mean - data formed from 00:00:00 to 23:59:59
  
  Examples:
    - logen -m "12,3,50,\040" (\040 - space)
    " \
  | sed 's/^\s\s//' 1>&2
  
  exit 1
}

function sys_error() {
  [[ "$@" ]] && echo "err: $@" >&2
  critical_error_flag="1"
}

function sys_debug() {
  [[ "${DEBUG}" == 'true' ]] && echo -e "dbg: $@" >&2
}

function sys_is_abort() {
  if [[ "${critical_error_flag}" == '1' ]]; then
    echo "tip: type ./logen -h for usage"
    echo "exit"
    exit 1
  fi
}

function fx_define_vars()
{
  critical_error_flag=''
  DEBUG='false'
  
  DATE_START=''
  DATE_END=''

  DATE_FORMAT=''
  DATE_STEP=0

  OUTPUT_FNAME=''

  GARB_FIELDS=''
}

function fx_define_const() {
  readonly DEBUG
  
  readonly DATE_START
  readonly DATE_END

  readonly DATE_FORMAT
  readonly DATE_STEP

  readonly GARB_FIELDS
}

function fx_getopts() {

  local OPTIND \
        flag

  # Get main options

  while getopts 'bhs:d:o:g:' flag
  do
    case "${flag}" in
      
      b) DEBUG='true' ;;

      s) DATE_STEP="${OPTARG}" ;;

      d) DATE_FORMAT="${OPTARG}" ;;
      
      o)
         OUTPUT_FNAME="${OPTARG}"
         truncate --size 0 "${OUTPUT_FNAME}" >&2 || sys_error 'Option -o - can`t write test file'
         ;;
      
      # Checking for format : %d,%d,%d,%s

      g) GARB_FIELDS="${OPTARG}"
         [[ $(grep -o "," <<< "${GARB_FIELDS}" | wc -l) != 3 ]] && sys_error 'Option -m failed'
         ;;

      h) fx_usage ;;
      ?) sys_error ;;

    esac
  done
  
  sys_debug "script parametrs: $@";

  # Get dates

  shift "$((OPTIND-1))"

  [[ -n "$1" ]] && DATE_START="$1"
  [[ -n "$2" ]] && DATE_END="$2"
}

function fx_check_required_options() {

  [[ -z "${DATE_STEP}" ]] && sys_error 'Option -s is required'
  [[ -z "${DATE_FORMAT}" ]] && sys_error 'Option -d is required'
  [[ -z "${DATE_FORMAT}" ]] && sys_error 'Option -o is required'
  [[ -z "${GARB_FIELDS}" ]] && sys_error 'Option -g is required'
  [[ -z "${DATE_START}" ]] && sys_error '\$1 as date_start is required'
  [[ -z "${DATE_END}" ]] && sys_error '\$2 as date_end is required'

}

function fx_check_dates_format() {

  date -d "${DATE_START}" > /dev/null 2>&1
  [[ $(echo "$?") != 0 ]] && sys_error 'Start date format is not recognized'
    
  date -d "${DATE_END}" > /dev/null 2>&1
  [[ $(echo "$?") != 0 ]] && sys_error 'End date format is not recognized'

}

function fx_form_garb() {

  local i \
        garb_format \
        side \
        fields_count \
        fields_length \
        fields_separator \
        fields_date \
        garb_tpl
  
  # Split array

  gf="${GARB_FIELDS}"
  garb_format=(${GARB_FIELDS//,/ })
  
  fields_count="${garb_format[0]}"
  fields_date="${garb_format[1]}"
  fields_separator="${garb_format[3]}"

  if [[ "${garb_format[2]}" -eq 0 ]]; then
    fields_length=$(((RANDOM%10)+1))
  else
    fields_length="${garb_format[2]}"
  fi
  
  # Form temp string with defined length
  
  garb_tpl=$(echo \
  $(for ((i=1; i<=${fields_length}; i++))
    do
      printf '%s' "${RANDOM:0:1}"
    done
    )
  )
  
  # Return string before date field

  if [[ "${1}" == "left" ]]; then

    for ((i=1; i<${fields_date}; i++)); do
      printf "${i}${garb_tpl}${fields_separator}"
    done
  
  # Return string after date field

  else

    for ((i=$(((${fields_date}+1)));i<=${fields_count};i++)); do
      printf "${fields_separator}${i}${garb_tpl}"
    done

  fi

}

function fx_compare_fileoutput() {

  local iter_curr \
        iter_end \
        loop_cnt \
        output_file \
        items_total \
        i

  # Set dates in unix timestamp format for iterate

  iter_curr=$(date -d "$(date -d "${DATE_START}" +%Y-%m-%d)" +%s)
  iter_end=$(date -d "$(date -d "${DATE_END}" +%Y-%m-%d)" +%s)

  # Set first time output file

  output_file=${OUTPUT_FNAME}_$(date -d "@${iter_curr}" +%Y-%m-%d)

  # Prepare vars for defining end of day

  i=0
  items_total=0
  loop_cnt=$(((86400/${DATE_STEP})))  # how many steps in day

  # Iterate

  while [[ "${iter_curr}" -le "${iter_end}" ]]; do

    # If new day is started

    if [[ "${i}" -ge "${loop_cnt}" ]]; then
      sys_debug "Added ${items_total} items to ${output_file}"  
      i=0
      touch -t "$(date -d "@$((($iter_curr-$DATE_STEP)))" +%Y%m%d)2359" ${output_file}
      output_file=${OUTPUT_FNAME}_$(date -d "@${iter_curr}" +%Y-%m-%d)
    fi
    
    # Output current record

    echo "${1}$(date -d "@${iter_curr}" ${DATE_FORMAT})${2}" >> ${output_file}

    # System counters

    ((i++))
    ((items_total++))
    ((iter_curr=${iter_curr}+${DATE_STEP}))

  done

}
 
function fx_compare_stdout() {
  
  local items_total \
        iter_curr \
        iter_end
  
  i=0
  items_total=0

  iter_curr=$(date -d "$(date -d "${DATE_START}" +%Y-%m-%d)" +%s)
  iter_end=$(date -d "$(date -d "${DATE_END}" +%Y-%m-%d)" +%s)

  while [[ "${iter_curr}" -le "${iter_end}" ]]; do

    echo "${1}$(date -d "@${iter_curr}" ${DATE_FORMAT})${2}"

    ((i++))
    ((items_total++))
    ((iter_curr=${iter_curr}+${DATE_STEP}))

    [[ "${i}" -eq 1000 ]] && sys_debug "Added ${items_total} items" && i=0  

  done

}

function main() {

  local garb_left \
        garb_right

  fx_define_vars
  fx_getopts "$@"
  fx_define_const

  fx_check_required_options
  sys_is_abort

  fx_check_dates_format
  sys_is_abort
  
  garb_left="$(fx_form_garb "left")"
  garb_right="$(fx_form_garb "right")"
  
  sys_debug "Garb example: ${garb_left}&&${garb_right}"

  if [[ -n "${OUTPUT_FNAME}" ]]; then
    fx_compare_fileoutput "$garb_left" "$garb_right"
  else
    fx_compare_stdout "$garb_left" "$garb_right"
  fi

}

main "$@"